{"ast":null,"code":"import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport backend from \"i18next-xhr-backend\";\nimport { reactI18nextModule } from \"react-i18next\"; // translations are already at\n// '../public/locales/en/translation.json'\n// which is the default for the xhr backend to load from\n\nimport translationEN from './locales/en/translation.json';\nimport translationES from './locales/es/translation.json'; // the translations\n\nconst resources = {\n  en: {\n    translation: translationEN\n  },\n  es: {\n    translation: translationES\n  }\n};\ni18n.use(detector).use(backend).use(reactI18nextModule) // passes i18n down to react-i18nextxt\n.init({\n  resources,\n  lng: \"es\",\n  fallbackLng: \"es\",\n  // use en if detected lng is not available\n  whitelist: ['en', 'es'],\n  keySeparator: false,\n  // we do not use keys in form messages.welcome\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  },\n  backend: {\n    loadPath: './locales/{{lng}}/{{ns}}.json'\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["C:/Users/shuga/Documents/GitU/IIMAS/iimas_auth_frontend/src/i18n/i18n.js"],"names":["i18n","detector","backend","reactI18nextModule","translationEN","translationES","resources","en","translation","es","use","init","lng","fallbackLng","whitelist","keySeparator","interpolation","escapeValue","loadPath"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,kBAAT,QAAmC,eAAnC,C,CAEA;AACA;AACA;;AAEA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B,C,CAGA;;AACA,MAAMC,SAAS,GAAG;AACdC,EAAAA,EAAE,EAAE;AACAC,IAAAA,WAAW,EAAEJ;AADb,GADU;AAIdK,EAAAA,EAAE,EAAE;AACAD,IAAAA,WAAW,EAAEH;AADb;AAJU,CAAlB;AAUAL,IAAI,CACCU,GADL,CACST,QADT,EAEKS,GAFL,CAESR,OAFT,EAGKQ,GAHL,CAGSP,kBAHT,EAG6B;AAH7B,CAIKQ,IAJL,CAIU;AACFL,EAAAA,SADE;AAEFM,EAAAA,GAAG,EAAE,IAFH;AAGFC,EAAAA,WAAW,EAAE,IAHX;AAGiB;AACnBC,EAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,CAJT;AAKFC,EAAAA,YAAY,EAAE,KALZ;AAKmB;AAErBC,EAAAA,aAAa,EAAE;AACXC,IAAAA,WAAW,EAAE,KADF,CACQ;;AADR,GAPb;AAUFf,EAAAA,OAAO,EAAE;AACLgB,IAAAA,QAAQ,EAAE;AADL;AAVP,CAJV;AAmBA,eAAelB,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport backend from \"i18next-xhr-backend\";\nimport { reactI18nextModule } from \"react-i18next\";\n\n// translations are already at\n// '../public/locales/en/translation.json'\n// which is the default for the xhr backend to load from\n\nimport translationEN from './locales/en/translation.json';\nimport translationES from './locales/es/translation.json';\n\n\n// the translations\nconst resources = {\n    en: {\n        translation: translationEN\n    },\n    es: {\n        translation: translationES\n    },\n};\n\n\ni18n\n    .use(detector)\n    .use(backend)\n    .use(reactI18nextModule) // passes i18n down to react-i18nextxt\n    .init({\n        resources,\n        lng: \"es\",\n        fallbackLng: \"es\", // use en if detected lng is not available\n        whitelist: ['en', 'es'],\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        },\n        backend: {\n            loadPath: './locales/{{lng}}/{{ns}}.json',\n        },\n    });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}