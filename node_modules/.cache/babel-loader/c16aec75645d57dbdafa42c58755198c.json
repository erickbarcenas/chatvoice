{"ast":null,"code":"import i18n from\"i18next\";import detector from\"i18next-browser-languagedetector\";import backend from\"i18next-xhr-backend\";import{reactI18nextModule}from\"react-i18next\";// translations are already at\n// '../public/locales/en/translation.json'\n// which is the default for the xhr backend to load from\nimport translationEN from'./locales/en/translation.json';import translationES from'./locales/es/translation.json';// the translations\nvar resources={en:{translation:translationEN},es:{translation:translationES}};i18n.use(detector).use(backend).use(reactI18nextModule)// passes i18n down to react-i18nextxt\n.init({resources:resources,lng:\"es\",fallbackLng:\"es\",// use en if detected lng is not available\nwhitelist:['en','es'],keySeparator:false,// we do not use keys in form messages.welcome\ninterpolation:{escapeValue:false// react already safes from xss\n},backend:{loadPath:'./locales/{{lng}}/{{ns}}.json'}});export default i18n;","map":{"version":3,"sources":["C:/Users/shuga/Documents/GitU/IIMAS/chatvoice/src/i18n/i18n.js"],"names":["i18n","detector","backend","reactI18nextModule","translationEN","translationES","resources","en","translation","es","use","init","lng","fallbackLng","whitelist","keySeparator","interpolation","escapeValue","loadPath"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,kCAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA,OAASC,kBAAT,KAAmC,eAAnC,CAEA;AACA;AACA;AAEA,MAAOC,CAAAA,aAAP,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,aAAP,KAA0B,+BAA1B,CAGA;AACA,GAAMC,CAAAA,SAAS,CAAG,CACdC,EAAE,CAAE,CACAC,WAAW,CAAEJ,aADb,CADU,CAIdK,EAAE,CAAE,CACAD,WAAW,CAAEH,aADb,CAJU,CAAlB,CAUAL,IAAI,CACCU,GADL,CACST,QADT,EAEKS,GAFL,CAESR,OAFT,EAGKQ,GAHL,CAGSP,kBAHT,CAG6B;AAH7B,CAIKQ,IAJL,CAIU,CACFL,SAAS,CAATA,SADE,CAEFM,GAAG,CAAE,IAFH,CAGFC,WAAW,CAAE,IAHX,CAGiB;AACnBC,SAAS,CAAE,CAAC,IAAD,CAAO,IAAP,CAJT,CAKFC,YAAY,CAAE,KALZ,CAKmB;AAErBC,aAAa,CAAE,CACXC,WAAW,CAAE,KAAM;AADR,CAPb,CAUFf,OAAO,CAAE,CACLgB,QAAQ,CAAE,+BADL,CAVP,CAJV,EAmBA,cAAelB,CAAAA,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport backend from \"i18next-xhr-backend\";\nimport { reactI18nextModule } from \"react-i18next\";\n\n// translations are already at\n// '../public/locales/en/translation.json'\n// which is the default for the xhr backend to load from\n\nimport translationEN from './locales/en/translation.json';\nimport translationES from './locales/es/translation.json';\n\n\n// the translations\nconst resources = {\n    en: {\n        translation: translationEN\n    },\n    es: {\n        translation: translationES\n    },\n};\n\n\ni18n\n    .use(detector)\n    .use(backend)\n    .use(reactI18nextModule) // passes i18n down to react-i18nextxt\n    .init({\n        resources,\n        lng: \"es\",\n        fallbackLng: \"es\", // use en if detected lng is not available\n        whitelist: ['en', 'es'],\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        },\n        backend: {\n            loadPath: './locales/{{lng}}/{{ns}}.json',\n        },\n    });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}